apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'io.fabric'

android {
    compileSdkVersion 26
    defaultConfig {
        applicationId 'me.deyinejiddou.skeleton'
        minSdkVersion 23
        targetSdkVersion 26
        versionCode buildConfig.version.code
        versionName buildConfig.version.name
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        multiDexEnabled true
    }

    signingConfigs {
        if (file('skeleton.jks').exists()) {
            project.logger.lifecycle("[SKELETON] - Signing config found")
            project.logger.lifecycle("[SKELETON] - Generate release version ${buildConfig.version.code} - ${buildConfig.version.name} ")
            release {
                storeFile file('skeleton.jks')
                storePassword propOrEmpty('SKELETON_STORE_PASSWORD')
                keyAlias 'skeletonkey'
                keyPassword propOrEmpty('SKELETON_KEY_PASSWORD')
            }
        } else {
            project.logger.lifecycle("[SKELETON] - Signing config not found")
        }
    }

    lintOptions {
        textReport true
        textOutput 'stdout'
        lintConfig rootProject.file('lint.xml')
    }

    buildTypes {
        release {
            versionNameSuffix "-R"
            if (file('skeleton.jks').exists()) {
                signingConfig signingConfigs.release
            }

            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        applicationVariants.all { variant ->
            variant.outputs.all {
                outputFileName = "${buildConfig.applicationName}-${variant.buildType.name}-${defaultConfig.versionName}.apk"
            }
        }
    }

    flavorDimensions "stage"
    productFlavors {
        development {
            dimension "stage"
            getProps('./config/development.props').each { p ->
                buildConfigField 'String', p.key, p.value
            }
        }
        production {
            dimension "stage"
            getProps('./config/production.props').each { p ->
                buildConfigField 'String', p.key, p.value
            }
        }
    }

    androidExtensions {
        experimental = true
    }

}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jre7:$kotlin_version"

    implementation 'com.android.support:support-v13:26.1.0'
    implementation 'com.android.support:appcompat-v7:26.1.0'
    implementation 'com.android.support:cardview-v7:26.1.0'
    implementation 'com.android.support:recyclerview-v7:26.1.0'
    implementation 'com.android.support.constraint:constraint-layout:1.0.2'
    implementation 'com.android.support:design:26.1.0'
    implementation 'com.android.support:multidex:1.0.1'

    implementation 'uk.co.chrisjenx:calligraphy:2.3.0'
    implementation 'com.squareup.retrofit2:retrofit:2.3.0'
    implementation 'com.squareup.retrofit2:adapter-rxjava2:2.3.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.3.0'
    implementation 'com.google.code.gson:gson:2.7'


    // Logger
    implementation 'com.jakewharton.timber:timber:4.6.1'

    // State
    implementation 'com.evernote:android-state:1.1.6'
    kapt 'com.evernote:android-state-processor:1.1.6'

    // Permissions
    implementation 'com.karumi:dexter:4.2.0'
    // Reactive library
    implementation 'io.reactivex.rxjava2:rxkotlin:2.2.0'
    implementation 'io.reactivex.rxjava2:rxandroid:2.0.1'

    // Image processing
    implementation 'com.github.bumptech.glide:glide:4.3.1'
    kapt 'com.github.bumptech.glide:compiler:4.3.1'
    // UI components
    implementation 'com.basgeekball:awesome-validation:3.0'
    implementation 'com.afollestad.material-dialogs:core:0.9.6.0'
    implementation 'com.wang.avi:library:2.1.3'
    implementation 'com.loopeer.lib:shadow:0.0.4-beta1'
    implementation 'com.wdullaer:materialdatetimepicker:3.5.1'
    compile 'com.github.Kennyc1012:BottomSheet:2.4.0'

    // AutoUpdate
    implementation 'com.deyinejiddou.appdater:appdater:1.1.2'

    // Firebase
    implementation('com.crashlytics.sdk.android:crashlytics:2.9.1@aar') {
        transitive = true
    }
    implementation 'com.google.firebase:firebase-core:11.8.0'
    implementation 'com.google.firebase:firebase-messaging:11.8.0'


    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.1'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.1'
}


def getProps(path) {
    Properties props = new Properties()
    props.load(new FileInputStream(file(path)))
    return props
}

apply plugin: 'com.google.gms.google-services'